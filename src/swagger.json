{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Quick Pick API",
    "description": "Quick Pick API",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "schemes": [
    "http",
    "https"
  ],
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "Stores",
      "description": "API for store in the system"
    },
    {
      "name": "Clients",
      "description": "API for clients in the system"
    },
    {
      "name": "Products",
      "description": "API for products in the system"
    },
    {
      "name": "Orders",
      "description": "API for orders by the clients in the system"
    },
    {
      "name": "Cart",
      "description": "API for the cart by the clients in the system",
      "deprecated": true
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/users": {
      "post": {
        "tags": [
          "Clients"
        ],
        "summary": "Create new client",
        "description": "Create new client in system",
        "operationId": "store",
        "parameters": [
          {
            "name": "client",
            "in": "body",
            "required": true,
            "description": "Client that we want to create",
            "schema": {
              "$ref": "#/definitions/Client"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "New user is created",
            "schema": {
              "$ref": "#/definitions/Client"
            }
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "tags": [
          "Clients"
        ],
        "summary": "Get information by logged client",
        "operationId": "getMe",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Client"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      },
      "put": {
        "tags": [
          "Clients"
        ],
        "summary": "Update information by logged client",
        "operationId": "updateMe",
        "parameters": [
          {
            "name": "client",
            "in": "body",
            "required": true,
            "description": "Update information of client that we want to update",
            "schema": {
              "$ref": "#/definitions/Client"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Client"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/users/login": {
      "post": {
        "tags": [
          "Clients"
        ],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "login",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Email and Password to log in client",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type":"object",
              "properties": {
                "client": {
                  "$ref": "#/definitions/Client"
                },
                "token": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Invalid username/password supplied"
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/users/me/logout": {
      "post": {
        "tags": [
          "Clients"
        ],
        "summary": "Logout client from current device",
        "operationId": "logout",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/users/me/logoutall": {
      "post": {
        "tags": [
          "Clients"
        ],
        "summary": "Logout client from all connected devices",
        "operationId": "logoutAll",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/products": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get all products",
        "operationId": "index",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Product"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Create new product",
        "description": "Create new product",
        "operationId": "store",
        "parameters": [
          {
            "name": "product",
            "in": "body",
            "description": "Product that we want to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "New product is created",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        }
      }
    },
    "/products/{id}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get an existing product",
        "operationId": "getProduct",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "500": {
            "description": "Failed to get"
          },
          "200": {
            "description": "Product information",
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Products"
        ],
        "summary": "Update an existing product",
        "description": "",
        "operationId": "update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Product object that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Product"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Failed to update"
          },
          "200": {
            "description": "Product has been updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "Products"
        ],
        "summary": "Deletes a product",
        "description": "",
        "operationId": "delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "500": {
            "description": "Failed to delete"
          },
          "200": {
            "description": "Product was deleted successfully"
          }
        }
      }
    },
    "/products/stock/{id}": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get stock by product ID",
        "operationId": "getStock",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string"
                },
                "amount": {
                  "type": "integer"
                }
              }
            }
          }
        }
      }
    },
    "/products/categories": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "Get categories from all products",
        "operationId": "getCategories",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/orders": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Create new order",
        "description": "Create new order, only logged user can create a order",
        "operationId": "store",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Order that we want to create and best time to pick the order",
            "type": "object",
            "properties": {
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CartItem"
                }
              },
              "dateTimeToPick": {
                "type": "string",
                "format": "date-time"
              },
              "total": {
                "type": "integer"
              }
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "New user is created",
            "schema": {
              "$ref": "#/definitions/Client"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/orders/filters": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Get all orders",
        "description": "Only for admin",
        "operationId": "getAllOrders",
        "parameters": [
          {
            "name": "order",
            "in": "body",
            "description": "Only properties what you want to filter or empty without filters",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string"
                },
                "number": {
                  "type": "integer"
                },
                "client": {
                  "type": "string"
                },
                "method": {
                  "type": "string"
                },
                "complete": {
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List orders",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Order"
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/orders/status/{orderId}": {
      "put": {
        "tags": [
          "Orders"
        ],
        "summary": "Update status by order",
        "description": "Client can only update if status is WAITING_APPROVAL and Admin can change all status",
        "operationId": "updateStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id from order to update",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "description": "New status",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List orders",
            "schema": {
              "$ref": "#/definitions/Order"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/orders/me": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get all orders by logged user",
        "operationId": "getByAuthUser",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Order"
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/orders/{id}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get an order by order id",
        "operationId": "getById",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Order"
              }
            }
          },
          "400": {
            "description": "Order not found"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/store": {
      "get": {
        "tags": [
          "Stores"
        ],
        "summary": "Get all stores",
        "operationId": "index",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Store"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Stores"
        ],
        "summary": "Create new store",
        "description": "Create new store",
        "operationId": "store",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "description": "Store that we want to create",
            "schema": {
              "$ref": "#/definitions/Store"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "New store is created",
            "schema": {
              "$ref": "#/definitions/Store"
            }
          }
        }
      }
    },
    "/store/{id}": {
      "get": {
        "tags": [
          "Stores"
        ],
        "summary": "Get store",
        "operationId": "getStore",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id from store",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Store"
              }
            }
          },
          "404": {
            "description": "Store not found"
          }
        }
      },
      "put": {
        "tags": [
          "Stores"
        ],
        "summary": "Update store",
        "operationId": "update",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id from store to update",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Store"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Store",
            "schema": {
              "$ref": "#/definitions/Store"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Stores"
        ],
        "summary": "Delete store",
        "operationId": "delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id from store to delete",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successfull operation"
          }
        }
      }
    },
    "/cart": {
      "get": {
        "deprecated": true,
        "tags": [
          "Cart"
        ],
        "summary": "Get cart for current user",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Cart"
            }
          }
        }
      },
      "post": {
        "deprecated": true,
        "tags": [
          "Cart"
        ],
        "summary": "Create cart for current user",
        "description": "Create cart for current user",
        "parameters": [
          {
            "name": "cartItem",
            "in": "body",
            "description": "Product that we want to add and quantity",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CartItem"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Cart"
            }
          }
        }
      }
    },
    "cart/{cartId}": {
      "delete": {
        "deprecated": true,
        "tags": [
          "Cart"
        ],
        "summary": "Remove cart",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successfull operation"
          }
        }
      }
    },
    "/cart/produt/{productId}": {
      "put": {
        "deprecated": true,
        "tags": [
          "Cart"
        ],
        "summary": "Update cart for current user",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "amount",
            "description": "Quantity to be updated to the cart",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Cart"
            }
          }
        }
      },
      "delete": {
        "deprecated": true,
        "tags": [
          "Cart"
        ],
        "summary": "Remove product from cart",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Cart"
            }
          }
        }
      }
    },
    "/importProducts": {
      "post": {
        "tags": [
          "Products"
        ],
        "summary": "Import a list of products",
        "consumes":[
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "arquivo",
            "in": "formData",
            "type": "file",
            "description": "Product that we want to add and quantity",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "JWT": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "definitions": {
    "Store": {
      "required": [
        "name",
        "address",
        "city",
        "state",
        "cnpj",
        "contactName",
        "phone",
        "whatsapp",
        "method"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "cnpj": {
          "type": "string"
        },
        "contactName": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "whatsapp": {
          "type": "string"
        },
        "method": {
          "type": "string",
          "enum": [
            "take_away",
            "delivery"
          ]
        },
        "active": {
          "type": "boolean"
        }
      }
    },
    "Client": {
      "required": [
        "name",
        "email",
        "password"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "uniqueItems": true
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "roles": {
          "type": "string"
        },
        "active": {
          "type": "boolean"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Product": {
      "required": [
        "brand",
        "title",
        "price",
        "category",
        "amount"
      ],
      "properties": {
        "brand": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "price": {
          "type": "integer"
        },
        "category": {
          "type": "string"
        },
        "discount": {
          "type": "integer"
        },
        "amount": {
          "type": "integer"
        },
        "offer": {
          "type": "boolean"
        },
        "image": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Order": {
      "type": "object",
      "properties": {
        "number": {
          "type": "string"
        },
        "client": {
          "$ref": "#/definitions/Client"
        },
        "items": {
          "type": "array",
          "xml": {
            "name": "product",
            "wrapped": true
          },
          "items": {
            "$ref": "#/definitions/CartItem"
          }
        },
        "status": {
          "type": "string",
          "description": "Order Status",
          "enum": [
            "waiting_approval",
            "approved",
            "in_progress",
            "ready_to_pick"
          ]
        },
        "method": {
          "type": "string",
          "description": "Method",
          "enum": [
            "take_away",
            "delivery"
          ]
        },
        "dateTimeToPick": {
          "type": "string",
          "format": "date-time"
        },
        "total": {
          "type": "integer"
        },
        "qrcodeRead": {
          "type": "boolean",
          "default": false
        },
        "complete": {
          "type": "boolean",
          "default": false
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "Cart": {
      "required": [
        "items"
      ],
      "properties": {
        "client": {
          "$ref": "#/definitions/Client"
        },
        "items": {
          "type": "array",
          "xml": {
            "name": "product",
            "wrapped": true
          },
          "items": {
            "$ref": "#/definitions/CartItem"
          }
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "CartItem": {
      "properties": {
        "product": {
          "$ref": "#/definitions/Product"
        },
        "amount": {
          "type": "integer"
        },
        "price": {
          "type": "integer"
        }
      }
    }
  }
}
